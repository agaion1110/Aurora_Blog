export const data = JSON.parse("{\"key\":\"v-5f3270f0\",\"path\":\"/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.html\",\"title\":\"什么是构建工具\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"edit\",\"date\":\"2023-08-12T00:00:00.000Z\",\"category\":[\"vue\",\"vite\",\"前端工程化\"],\"tag\":[\"笔记\",\"前端工程化构建工具\"],\"star\":3812,\"sticky\":true,\"copy.disableCopy\":true,\"description\":\"什么是构建工具 了解构建工具之前，我们首先要知道浏览器只认识html、css、js，而我们开发时用的vue，react框架都只是为了方便我们开发而使用的工具。 使用构建工具的原因 这些vue或者react的企业级别项目里都会具备这些功能： 使用typescript语言: 如果遇到ts文件我们需要使用tsc命令将typescript代码转换为js代码 使用React/Vue: 安装react-compiler / vue-complier, 将我们写的jsx文件或者.vue文件转换为render函数将他们转换为html、js、css。 使用less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具将它们转换为css 语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法（考虑兼容性） 体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成体积更小性能更高的文件 ......\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://wei-z.top/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/Vite/%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Aurora's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"什么是构建工具\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"什么是构建工具 了解构建工具之前，我们首先要知道浏览器只认识html、css、js，而我们开发时用的vue，react框架都只是为了方便我们开发而使用的工具。 使用构建工具的原因 这些vue或者react的企业级别项目里都会具备这些功能： 使用typescript语言: 如果遇到ts文件我们需要使用tsc命令将typescript代码转换为js代码 使用React/Vue: 安装react-compiler / vue-complier, 将我们写的jsx文件或者.vue文件转换为render函数将他们转换为html、js、css。 使用less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具将它们转换为css 语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法（考虑兼容性） 体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成体积更小性能更高的文件 ......\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Aurora\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"笔记\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"前端工程化构建工具\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-08-12T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"什么是构建工具\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-08-12T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Aurora\\\",\\\"url\\\":\\\"https://gitee.com/agaion1110\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"使用构建工具的原因\",\"slug\":\"使用构建工具的原因\",\"link\":\"#使用构建工具的原因\",\"children\":[]},{\"level\":2,\"title\":\"构建工具主要干了那些\",\"slug\":\"构建工具主要干了那些\",\"link\":\"#构建工具主要干了那些\",\"children\":[]}],\"readingTime\":{\"minutes\":3.55,\"words\":1064},\"filePathRelative\":\"文章/分类/前端工程化/Vite/什么是构建工具.md\",\"localizedDate\":\"2023年8月12日\",\"excerpt\":\"<h1> 什么是构建工具</h1>\\n<p>了解构建工具之前，我们首先要知道浏览器只认识<code>html</code>、<code>css</code>、<code>js</code>，而我们开发时用的<code>vue</code>，<code>react</code>框架都只是为了方便我们开发而使用的工具。</p>\\n<h2> 使用构建工具的原因</h2>\\n<p>这些<code>vue</code>或者<code>react</code>的企业级别项目里都会具备这些功能：</p>\\n<blockquote>\\n<ol>\\n<li>使用typescript语言: 如果遇到ts文件我们需要使用<code>tsc</code>命令将typescript代码转换为js代码</li>\\n<li>使用React/Vue: 安装<code>react-compiler</code> / <code>vue-complier</code>, 将我们写的jsx文件或者.vue文件转换为<code>render</code>函数将他们转换为html、js、css。</li>\\n<li>使用less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具将它们转换为css</li>\\n<li>语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法（考虑兼容性）</li>\\n<li>体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成<mark>体积更小性能更高</mark>的文件</li>\\n<li>......</li>\\n</ol>\\n</blockquote>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
