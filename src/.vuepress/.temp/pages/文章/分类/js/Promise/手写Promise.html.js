export const data = JSON.parse("{\"key\":\"v-51b31d42\",\"path\":\"/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/js/Promise/%E6%89%8B%E5%86%99Promise.html\",\"title\":\"自定义（手写）Promise\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"edit\",\"date\":\"2023-07-25T00:00:00.000Z\",\"category\":[\"js\"],\"tag\":[\"Promise\",\"面试题\"],\"star\":3725,\"sticky\":true,\"copy.disableCopy\":true,\"description\":\"自定义（手写）Promise 在写Promise之前，先要熟悉Promise的各种属性和功能函数，然后一步一步去实现。 Promise 是一个类，在实例化这个类的时候需要传递一个执行器executor进去，执行器会立即执行。 Promise中有三种状态，分别是：待定（pending）、 已兑现（fulfilled） 、已拒绝（rejected）（状态一旦确定不可改变，称之为已敲定（settled）。） 执行器executor接收两个参数resolve(成功执行的方法)和reject(失败执行的方法) Promise拥有then方法，方法内部需判断状态，接收了两个回调函数，如果成功调用成功的回调（onResolve），如果失败调用失败的回调（onReject）。then方法是被定义在原型对象中的。 Promise拥有catch方法，方法内部只接收失败的回调（onReject）。catch方法也是被定义在原型对象中的。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://wei-z.top/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/js/Promise/%E6%89%8B%E5%86%99Promise.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Aurora's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"自定义（手写）Promise\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"自定义（手写）Promise 在写Promise之前，先要熟悉Promise的各种属性和功能函数，然后一步一步去实现。 Promise 是一个类，在实例化这个类的时候需要传递一个执行器executor进去，执行器会立即执行。 Promise中有三种状态，分别是：待定（pending）、 已兑现（fulfilled） 、已拒绝（rejected）（状态一旦确定不可改变，称之为已敲定（settled）。） 执行器executor接收两个参数resolve(成功执行的方法)和reject(失败执行的方法) Promise拥有then方法，方法内部需判断状态，接收了两个回调函数，如果成功调用成功的回调（onResolve），如果失败调用失败的回调（onReject）。then方法是被定义在原型对象中的。 Promise拥有catch方法，方法内部只接收失败的回调（onReject）。catch方法也是被定义在原型对象中的。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Aurora\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Promise\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"面试题\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-07-25T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"自定义（手写）Promise\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-07-25T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Aurora\\\",\\\"url\\\":\\\"https://gitee.com/agaion1110\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"Promise对象\",\"slug\":\"promise对象\",\"link\":\"#promise对象\",\"children\":[{\"level\":3,\"title\":\"构造函数\",\"slug\":\"构造函数\",\"link\":\"#构造函数\",\"children\":[]},{\"level\":3,\"title\":\"静态方法\",\"slug\":\"静态方法\",\"link\":\"#静态方法\",\"children\":[]},{\"level\":3,\"title\":\"实例属性\",\"slug\":\"实例属性\",\"link\":\"#实例属性\",\"children\":[]},{\"level\":3,\"title\":\"实例方法\",\"slug\":\"实例方法\",\"link\":\"#实例方法\",\"children\":[]}]},{\"level\":2,\"title\":\"手写Promise对象\",\"slug\":\"手写promise对象\",\"link\":\"#手写promise对象\",\"children\":[{\"level\":3,\"title\":\"定义整体结构\",\"slug\":\"定义整体结构\",\"link\":\"#定义整体结构\",\"children\":[]},{\"level\":3,\"title\":\"构造函数constructor\",\"slug\":\"构造函数constructor\",\"link\":\"#构造函数constructor\",\"children\":[]},{\"level\":3,\"title\":\"then方法\",\"slug\":\"then方法\",\"link\":\"#then方法\",\"children\":[]},{\"level\":3,\"title\":\"catch方法\",\"slug\":\"catch方法\",\"link\":\"#catch方法\",\"children\":[]},{\"level\":3,\"title\":\"静态Resolve方法\",\"slug\":\"静态resolve方法\",\"link\":\"#静态resolve方法\",\"children\":[]},{\"level\":3,\"title\":\"静态Reject方法\",\"slug\":\"静态reject方法\",\"link\":\"#静态reject方法\",\"children\":[]},{\"level\":3,\"title\":\"静态all方法\",\"slug\":\"静态all方法\",\"link\":\"#静态all方法\",\"children\":[]},{\"level\":3,\"title\":\"静态race方法\",\"slug\":\"静态race方法\",\"link\":\"#静态race方法\",\"children\":[]}]},{\"level\":2,\"title\":\"代码\",\"slug\":\"代码\",\"link\":\"#代码\",\"children\":[]}],\"readingTime\":{\"minutes\":10.07,\"words\":3020},\"filePathRelative\":\"文章/分类/js/Promise/手写Promise.md\",\"localizedDate\":\"2023年7月25日\",\"excerpt\":\"<h1> 自定义（手写）Promise</h1>\\n<p>在写Promise之前，先要熟悉Promise的各种属性和功能函数，然后一步一步去实现。</p>\\n<blockquote>\\n<p>Promise 是一个类，在实例化这个类的时候需要传递一个执行器executor进去，执行器会立即执行。</p>\\n<p>Promise中有三种状态，分别是：<em>待定（pending）</em>、 <em>已兑现（fulfilled）</em> 、<em>已拒绝（rejected）</em>（状态一旦确定不可改变，称之为已<em>敲定（settled）</em>。）</p>\\n<p>执行器executor接收两个参数resolve(成功执行的方法)和reject(失败执行的方法)</p>\\n<p>Promise拥有then方法，方法内部需判断状态，接收了两个回调函数，如果成功调用成功的回调（onResolve），如果失败调用失败的回调（onReject）。then方法是被定义在原型对象中的。</p>\\n<p>Promise拥有catch方法，方法内部只接收失败的回调（onReject）。catch方法也是被定义在原型对象中的。</p>\\n</blockquote>\\n\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
