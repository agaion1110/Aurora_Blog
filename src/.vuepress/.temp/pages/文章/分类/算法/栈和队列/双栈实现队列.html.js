export const data = JSON.parse("{\"key\":\"v-736031a8\",\"path\":\"/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E7%AE%97%E6%B3%95/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%8F%8C%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html\",\"title\":\"用栈实现队列\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"edit\",\"date\":\"2023-08-06T00:00:00.000Z\",\"category\":[\"算法\"],\"tag\":[\"leetcode\"],\"star\":3806,\"sticky\":false,\"pageview\":true,\"copy.disableCopy\":true,\"description\":\"用栈实现队列 题目 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开头移除并返回元素 int peek() 返回队列开头的元素 boolean empty() 如果队列为空，返回 true ；否则，返回 false\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://wei-z.top/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E7%AE%97%E6%B3%95/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/%E5%8F%8C%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Aurora's Blog\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"用栈实现队列\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"用栈实现队列 题目 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开头移除并返回元素 int peek() 返回队列开头的元素 boolean empty() 如果队列为空，返回 true ；否则，返回 false\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2023-08-11T07:39:11.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Aurora\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"leetcode\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2023-08-06T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2023-08-11T07:39:11.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"用栈实现队列\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2023-08-06T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2023-08-11T07:39:11.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Aurora\\\",\\\"url\\\":\\\"https://gitee.com/agaion1110\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"题目\",\"slug\":\"题目\",\"link\":\"#题目\",\"children\":[]},{\"level\":2,\"title\":\"思路\",\"slug\":\"思路\",\"link\":\"#思路\",\"children\":[]},{\"level\":2,\"title\":\"复杂度\",\"slug\":\"复杂度\",\"link\":\"#复杂度\",\"children\":[]},{\"level\":2,\"title\":\"代码\",\"slug\":\"代码\",\"link\":\"#代码\",\"children\":[]}],\"git\":{\"createdTime\":1691739551000,\"updatedTime\":1691739551000,\"contributors\":[{\"name\":\"Aurora\",\"email\":\"1852831787@qq.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":2.67,\"words\":800},\"filePathRelative\":\"文章/分类/算法/栈和队列/双栈实现队列.md\",\"localizedDate\":\"2023年8月6日\",\"excerpt\":\"<h1> 用栈实现队列</h1>\\n<h2> 题目</h2>\\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>\\n<p>实现 <code>MyQueue</code> 类：</p>\\n<ul>\\n<li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li>\\n<li><code>int pop()</code> 从队列的开头移除并返回元素</li>\\n<li><code>int peek()</code> 返回队列开头的元素</li>\\n<li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li>\\n</ul>\",\"autoDesc\":true}")
