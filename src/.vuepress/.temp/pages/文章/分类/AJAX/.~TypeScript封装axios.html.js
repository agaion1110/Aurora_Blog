export const data = JSON.parse("{\"key\":\"v-7dc75599\",\"path\":\"/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/AJAX/.~TypeScript%E5%B0%81%E8%A3%85axios.html\",\"title\":\"TypeScript封装Axios | 基本封装与拦截器控制\",\"lang\":\"zh-CN\",\"frontmatter\":{\"icon\":\"edit\",\"date\":\"2023-08-21T00:00:00.000Z\",\"category\":[\"js\",\"学习笔记\",\"项目总结\"],\"tag\":[\"笔记\",\"AJAX请求\"],\"star\":true,\"sticky\":true,\"copy.disableCopy\":true,\"description\":\"TypeScript封装Axios | 基本封装与拦截器控制 Axios的基本使用 因axios基础使用十分简单，可参考axios官方文档，这里不在介绍他基本用法，主要讲解拦截器。 拦截器主要分为两种，请求拦截器和响应拦截器。 请求拦截器：请求发送之前进行拦截，应用于我们在请求发送前需要对请求数据做一些处理。例如：\"},\"headers\":[{\"level\":2,\"title\":\"Axios的基本使用\",\"slug\":\"axios的基本使用\",\"link\":\"#axios的基本使用\",\"children\":[]},{\"level\":2,\"title\":\"为什么要封装Axios\",\"slug\":\"为什么要封装axios\",\"link\":\"#为什么要封装axios\",\"children\":[]},{\"level\":2,\"title\":\"利用面向对象的思想对Axios进行封装\",\"slug\":\"利用面向对象的思想对axios进行封装\",\"link\":\"#利用面向对象的思想对axios进行封装\",\"children\":[{\"level\":3,\"title\":\"基础封装\",\"slug\":\"基础封装\",\"link\":\"#基础封装\",\"children\":[]},{\"level\":3,\"title\":\"拦截器的类型\",\"slug\":\"拦截器的类型\",\"link\":\"#拦截器的类型\",\"children\":[]},{\"level\":3,\"title\":\"配置全局拦截器（类拦截）\",\"slug\":\"配置全局拦截器-类拦截\",\"link\":\"#配置全局拦截器-类拦截\",\"children\":[]},{\"level\":3,\"title\":\"为某一Request实例单独配置拦截器（实例拦截）\",\"slug\":\"为某一request实例单独配置拦截器-实例拦截\",\"link\":\"#为某一request实例单独配置拦截器-实例拦截\",\"children\":[]},{\"level\":3,\"title\":\"同一个request实例的不同网络请求设置不同的拦截器（接口拦截）\",\"slug\":\"同一个request实例的不同网络请求设置不同的拦截器-接口拦截\",\"link\":\"#同一个request实例的不同网络请求设置不同的拦截器-接口拦截\",\"children\":[]},{\"level\":3,\"title\":\"各种请求拦截的执行顺序：\",\"slug\":\"各种请求拦截的执行顺序\",\"link\":\"#各种请求拦截的执行顺序\",\"children\":[]}]},{\"level\":2,\"title\":\"取消请求\",\"slug\":\"取消请求\",\"link\":\"#取消请求\",\"children\":[{\"level\":3,\"title\":\"准备\",\"slug\":\"准备\",\"link\":\"#准备\",\"children\":[]},{\"level\":3,\"title\":\"在发送请求前存入AbortController对象\",\"slug\":\"在发送请求前存入abortcontroller对象\",\"link\":\"#在发送请求前存入abortcontroller对象\",\"children\":[]},{\"level\":3,\"title\":\"请求已经完成了删除保存的url和AbortController对象\",\"slug\":\"请求已经完成了删除保存的url和abortcontroller对象\",\"link\":\"#请求已经完成了删除保存的url和abortcontroller对象\",\"children\":[]},{\"level\":3,\"title\":\"封装取消请求方法\",\"slug\":\"封装取消请求方法\",\"link\":\"#封装取消请求方法\",\"children\":[]}]}],\"readingTime\":{\"minutes\":11.71,\"words\":3512},\"filePathRelative\":\"文章/分类/AJAX/.~TypeScript封装axios.md\",\"localizedDate\":\"2023年8月21日\",\"excerpt\":\"<h1> TypeScript封装Axios | 基本封装与拦截器控制</h1>\\n<h2> Axios的基本使用</h2>\\n<p>因axios基础使用十分简单，可参考<a href=\\\"https://www.axios-http.cn/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">axios官方文档</a>，这里不在介绍他基本用法，主要讲解拦截器。\\n拦截器主要分为两种，<strong>请求拦截器</strong>和<strong>响应拦截器</strong>。\\n<strong>请求拦截器</strong>：请求发送之前进行拦截，应用于我们在请求发送前需要对请求数据做一些处理。例如：</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
