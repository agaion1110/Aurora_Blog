import{_ as e,W as s,X as c,a1 as o}from"./framework-fb0d306d.js";const t={},a=o(`<h1 id="什么是构建工具" tabindex="-1"><a class="header-anchor" href="#什么是构建工具" aria-hidden="true">#</a> 什么是构建工具</h1><p>了解构建工具之前，我们首先要知道浏览器只认识<code>html</code>、<code>css</code>、<code>js</code>，而我们开发时用的<code>vue</code>，<code>react</code>框架都只是为了方便我们开发而使用的工具。</p><h2 id="使用构建工具的原因" tabindex="-1"><a class="header-anchor" href="#使用构建工具的原因" aria-hidden="true">#</a> 使用构建工具的原因</h2><p>这些<code>vue</code>或者<code>react</code>的企业级别项目里都会具备这些功能：</p><blockquote><ol><li>使用typescript语言: 如果遇到ts文件我们需要使用<code>tsc</code>命令将typescript代码转换为js代码</li><li>使用React/Vue: 安装<code>react-compiler</code> / <code>vue-complier</code>, 将我们写的jsx文件或者.vue文件转换为<code>render</code>函数将他们转换为html、js、css。</li><li>使用less/sass/postcss/component-style: 我们又需要安装less-loader, sass-loader等一系列编译工具将它们转换为css</li><li>语法降级: babel ---&gt; 将es的新语法转换旧版浏览器可以接受的语法（考虑兼容性）</li><li>体积优化: uglifyjs ---&gt; 将我们的代码进行压缩变成<mark>体积更小性能更高</mark>的文件</li><li>......</li></ol></blockquote><p>这些所有的功能在每次修改项目时都必须全部执行一遍。</p><p>例如在React项目修改了App.tsx文件的内容，在编译运行到浏览器上之前，我们需要将该文件做如下的处理：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>App.tsx（使用了TypeScript语言）--&gt; 使用tsc（处理TypeScript） --&gt; App.jsx（先转变为JavaScript语言) === App.jsx（React文件）--&gt; React-complier（处理.jsx文件) --&gt;js文件（直到拿到js文件）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有一款帮助我们自动处理这些重复性工作的工具，是不是我们开发起来也非常麻烦呢，于是这样的工具也就诞生了：</p><p>这个工具能够帮你把<code>tsc</code>,<code> vue-complier</code>, <code>react-compiler</code>, <code>less-loader</code>, <code>babel</code>, <code>uglifyjs</code>等全部<strong>集成</strong>到一起。这样我们只需要关心我们写的代码就好了 ！！！一旦我们修改了某文件代码 ---&gt; 工具就会帮自动去调用tsc, react-compiler, less, babel, uglifyjs等其他工具并执行 ---&gt;<strong>最终直接生成浏览器能够渲染执行的html、css、 js文件。</strong></p><blockquote><p>而这个工具就叫做<strong>构建工具</strong>。</p><p>生成浏览器能够渲染执行的html、css、 js文件的过程就叫做<strong>打包</strong>。</p></blockquote><h2 id="构建工具主要干了那些" tabindex="-1"><a class="header-anchor" href="#构建工具主要干了那些" aria-hidden="true">#</a> 构建工具主要干了那些</h2><ol><li><p>模块化开发支持: 支持直接从node_modules里引入代码 + 多种模块化支持</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span> <span class="token comment">//浏览器并不认识这样的文件引入方式，它只认识绝对路径和相对路径的引入方式。所以这里构建工具就需要对他进行处理。将&#39;vue&#39;转变为&#39;./vue&#39;等等。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>处理代码兼容性: 比如babel语法降级, less,ts 语法转换(<strong>不是构建工具做的, 构建工具将这些语法对应的处理工具集成进来自动化处理</strong>)</p></li><li><p>提高项目性能: 压缩文件, <strong>代码分割</strong></p></li><li><p>优化开发体验:</p><ul><li>构建工具会帮你自动监听文件的变化, 当文件变化以后自动帮你调用对应的集成工具进行重新打包, 然后再浏览器重新运行（整个过程叫做热更新, <code>hot replacement</code></li><li>开发服务器: 跨域的问题, 用<code>react-cli</code>， <code>create-react-element</code>， <code>vue-cli</code> 解决跨域的问题,</li></ul></li></ol><p>每次改一点 ---&gt; 这个顺序还不能错</p><p>构建工具他让我们可以不用每次都关心我们的代码在浏览器如何运行, 我们只需要首次给构建工具提供一个配置文件(这个配置文件也不是必须的, 如果你不给他 他会有默认的帮你去处理), 有了这个集成的配置文件以后, 我们就可以在下次需要更新的时候调用一次对应的命令就好了, 如果我们再结合热更新, 我们就更加不需要管任何东西, 这就是构建工具去做的东西, <strong>他让我们不用关心生产的代码也不用关心代码如何在浏览器运行, 只需要关心我们的开发怎么写的爽怎么写就好了</strong></p>`,15),l=[a];function d(r,i){return s(),c("div",null,l)}const p=e(t,[["render",d],["__file","什么是构建工具.html.vue"]]);export{p as default};
