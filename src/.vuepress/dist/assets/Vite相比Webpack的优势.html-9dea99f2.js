import{_ as e,W as t,X as p,Y as n,Z as s,a0 as o,$ as c,a1 as i,C as l}from"./framework-fb0d306d.js";const u="/assets/image-20230812211327146-09c8f884.png",r="/assets/image-20230812211357219-ef8ccebf.png",d={},k=n("h1",{id:"vite相比webpack的优势",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite相比webpack的优势","aria-hidden":"true"},"#"),s(" Vite相比Webpack的优势")],-1),m={href:"https://cn.vitejs.dev/guide/why.html#the-problems",target:"_blank",rel:"noopener noreferrer"},v=n("blockquote",null,[n("p",null,"当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。包含数千个模块的大型项目相当普遍。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR(热更新)，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。")],-1),b=n("p",null,"起因: 我们的项目越大 ----> 构建工具（webpack）所要处理的js代码就越多 【跟webpack的一个构建过程（工作流程）有关系】",-1),_=n("p",null,"造成的结果: 构建工具需要很长时间才能启动开发服务器 (启动开发服务器 ---> 把项目跑起来)",-1),g=i('<h2 id="造成这种现象的直接原因" tabindex="-1"><a class="header-anchor" href="#造成这种现象的直接原因" aria-hidden="true">#</a> 造成这种现象的直接原因</h2><p>首先，我们要清除地了解到<code>Vite</code>相比<code>Webpack</code>有一点区别在于<code>Webpack</code>支持多种模块导入方式包括CommonJs 、 ES Modeule等等。</p><p>在启动时，它必须把所有的模块都打包构建，这样才能保证将所有的模块导入方式都转换为浏览器可以识别的模块导入方式。</p><p>由于<code>webpack dev server</code> 在启动时需要先<code>build</code>一遍，而这个过程需要消耗很多时间</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而Vite 不同的是 执行<code>vite serve</code> 时，内部直接启动了web Server, 并不会先编译所有的代码文件。</p><figure><img src="'+r+`" alt="image-20230812211357219" tabindex="0" loading="lazy"><figcaption>image-20230812211357219</figcaption></figure><p>但是webpack 这类工具的做法是将所有模块提前编译、打包进bundle里，换句话说，不管模块是否会被执行，都要被编译和打包到bundle里。随着项目越来越大，打包后的bundle也越来越大，打包的速度自然会越来越慢。</p><h2 id="webpack可以优化吗" tabindex="-1"><a class="header-anchor" href="#webpack可以优化吗" aria-hidden="true">#</a> Webpack可以优化吗</h2><p>答案是不能，顶多我们按需引入，但是任然没有从根本上解决它导入无关模块这一个问题。所以如果一旦要改那么将会动到webpack的命脉。</p><p>因为webpack之所以强大，就是因为它强大的生态，因为它支持多种模块化:，所以你的工程将不只是跑在浏览器端。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 这一段代码最终会到浏览器里去运行</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// commonjs 规范</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span> <span class="token comment">// es6 module</span>
<span class="token comment">// webpack是允许我们同时写多种模块引入方式的</span>
<span class="token operator">...</span><span class="token operator">...</span>
<span class="token comment">// webpack的一个转换结果</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack的编译原理：使用 AST 抽象语法分析的工具，因为构建工具是运行在服务端的，所以他可以直接分析出你写的这个js文件有哪些导入和导出操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转换的核心代码（利用一个立即执行函数）</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 入口是index.js</span>
    <span class="token comment">// 通过webpack的配置文件得来的: webpack.config.js ./src/index.js</span>
    modules<span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">(</span>webpack_require<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;./src/index.js&quot;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">webpack_require</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;lodash&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> Vue <span class="token operator">=</span> <span class="token function">webpack_require</span><span class="token punctuation">(</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为webpack支持多种模块化, 他一开始必须要统一模块化代码, 所以意味着他需要将所有的依赖全部读一遍。所以这也就表明，webpack的缺陷是难以避免的。</p><p><strong>综上：vite也不可能直接把webpack替代, vite是基于es modules的, 侧重点不一样, webpack更多的<code>关注兼容性</code>, 而vite关注<code>浏览器端的开发体验</code></strong></p>`,16);function h(w,f){const a=l("ExternalLinkIcon");return t(),p("div",null,[k,n("p",null,[s("引用"),n("a",m,[s("Vite官方文档"),o(a)]),s("中的一段话:")]),v,b,_,c(" more "),g])}const x=e(d,[["render",h],["__file","Vite相比Webpack的优势.html.vue"]]);export{x as default};
