import{_ as s,W as a,X as t,$ as e,a1 as n}from"./framework-fb0d306d.js";const p={},o=n('<h1 id="自定义事件" tabindex="-1"><a class="header-anchor" href="#自定义事件" aria-hidden="true">#</a> 自定义事件</h1><p>组件的自定义事件实现子组件向父组件传递数据的功能，所以，自定义事件的<strong>绑定</strong>需要在父组件中完成。</p><p>组件的自定义事件的<strong>触发</strong>需要在子组件中完成，给谁绑定的事件，就找谁触发。</p><p>在了解组件的自定义事件之前，我们也了解过<code>props</code>，<code>props</code>也能实现子组件向父组件通信，接下来展示的将是通过自定义事件完成子传父功能。</p>',4),c=n(`<h2 id="父组件" tabindex="-1"><a class="header-anchor" href="#父组件" aria-hidden="true">#</a> 父组件：</h2><ol><li>绑定自定义事件</li><li>确定自定义事件具体内容</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 绑定自定义事件people，自定义事件里的函数是p --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Child</span> <span class="token attr-name">@people</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">&quot;./Child.vue&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;p被调用了~,收到参数是：&#39;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token comment">//这里name就将是子组件传来的参数</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="子组件" tabindex="-1"><a class="header-anchor" href="#子组件" aria-hidden="true">#</a> 子组件</h2><ol><li>触发自定义事件</li><li>触发自定义事件的内容</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handler<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击我触发自定义事件people<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 也可以直接绑定自定义事件people --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>$emit(&#39;people&#39;,&#39;李四&#39;)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击我也能触发自定义事件people<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token comment">//利用defineEmits方法返回函数触发自定义事件</span>
<span class="token comment">//defineEmits方法不需要引入直接使用</span>
<span class="token keyword">let</span> $emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;people&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 给DOM原生事件——点击事件绑定函数handler</span>
<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token comment">//第一个参数:事件类型 第二个|三个|N参数即为注入数据（子组件向父组件传递的参数）</span>
    <span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;people&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将自定义事件放入点击事件，并执行。</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue2和vue3中的区别" tabindex="-1"><a class="header-anchor" href="#vue2和vue3中的区别" aria-hidden="true">#</a> Vue2和Vue3中的区别</h2><p>在自定义事件上，Vue2和Vue3发生了一些变化。</p><p>区别：</p><ol><li>在vue2中，父组件身上给子组件标签元素设置<strong>自定义事件</strong> <code>&lt;子组件名 @事件名=&quot;方法名&quot; /&gt;</code>，通过这种形势绑定的都是自定义事件，需要通过<code>.native</code>修饰符变为原生DOM事件。</li><li>在vue3中，<code>&lt;子组件名 @事件名=&quot;方法名&quot; /&gt;</code>这种事件的绑定都是什么类型的事件，首先看子组件<code>emits</code>中有没有声明，如果声明了，不管事件名是什么都是自定义事件，其次是看事件名是否为原生事件中包含的事件例如：<code>click</code>等，如果是，那么就是原生DOM事件，不许要<code>.native</code>修饰符来声明。</li></ol><p>例如：</p><p>Vue2中触发父组件中的子组件标签的原生DOM事件需要添加.native修饰符</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>event1</span>  <span class="token attr-name">@click.native</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handler1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>event1</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vue3中子组件要发送的自定义事件需要在配置项emits中声明<code>emits:[&quot;setData&quot;]</code></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>studyEmits</span> <span class="token attr-name">@setData</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getData<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showAlert<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>studyEmits</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：<code>click</code>如果没有在子组件<code>emits</code>中声明就是原生DOM事件.</p>`,16);function l(u,i){return a(),t("div",null,[o,e(" more "),c])}const d=s(p,[["render",l],["__file","自定义事件.html.vue"]]);export{d as default};
