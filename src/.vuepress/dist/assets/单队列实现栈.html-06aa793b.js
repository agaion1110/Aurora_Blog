const e=JSON.parse(`{"key":"v-686554f0","path":"/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E7%AE%97%E6%B3%95/%E5%8D%95%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html","title":"用队列实现栈","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-08-06T00:00:00.000Z","category":["算法"],"tag":["leetcode"],"star":3806,"sticky":false,"pageview":true,"copy.disableCopy":true,"description":"用队列实现栈 题目 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。 实现 MyStack 类： void push(int x) 将元素 x 压入栈顶。 int pop() 移除并返回栈顶元素。 int top() 返回栈顶元素。 boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。","head":[["meta",{"property":"og:url","content":"https://wei-z.top/%E6%96%87%E7%AB%A0/%E5%88%86%E7%B1%BB/%E7%AE%97%E6%B3%95/%E5%8D%95%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html"}],["meta",{"property":"og:site_name","content":"Aurora's Blog"}],["meta",{"property":"og:title","content":"用队列实现栈"}],["meta",{"property":"og:description","content":"用队列实现栈 题目 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（push、top、pop 和 empty）。 实现 MyStack 类： void push(int x) 将元素 x 压入栈顶。 int pop() 移除并返回栈顶元素。 int top() 返回栈顶元素。 boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"Aurora"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:published_time","content":"2023-08-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"用队列实现栈\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aurora\\",\\"url\\":\\"https://gitee.com/agaion1110\\"}]}"]]},"headers":[{"level":2,"title":"题目","slug":"题目","link":"#题目","children":[]},{"level":2,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.46,"words":738},"filePathRelative":"文章/分类/算法/单队列实现栈.md","localizedDate":"2023年8月6日","excerpt":"<h1> 用队列实现栈</h1>\\n<h2> 题目</h2>\\n<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p>\\n<p>实现 <code>MyStack</code> 类：</p>\\n<ul>\\n<li><code>void push(int x)</code> 将元素 x 压入栈顶。</li>\\n<li><code>int pop()</code> 移除并返回栈顶元素。</li>\\n<li><code>int top()</code> 返回栈顶元素。</li>\\n<li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\\n</ul>","autoDesc":true}`);export{e as data};
