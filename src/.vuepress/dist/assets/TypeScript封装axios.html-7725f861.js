import{_ as t,W as p,X as e,Y as n,Z as s,a0 as o,a1 as c,C as i}from"./framework-fb0d306d.js";const l={},u=n("h1",{id:"typescript封装axios-基本封装与拦截器控制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typescript封装axios-基本封装与拦截器控制","aria-hidden":"true"},"#"),s(" TypeScript封装Axios | 基本封装与拦截器控制")],-1),r=n("h2",{id:"axios的基本使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#axios的基本使用","aria-hidden":"true"},"#"),s(" Axios的基本使用")],-1),k={href:"https://www.axios-http.cn/",target:"_blank",rel:"noopener noreferrer"},d=n("strong",null,"请求拦截器",-1),v=n("strong",null,"响应拦截器",-1),m=n("strong",null,"请求拦截器",-1),b=c(`<blockquote><ul><li>携带token</li><li>当请求时间过长时，设置loading</li></ul></blockquote><p><strong>响应拦截器</strong>：在响应到达时进行拦截，应用于在我们业务代码中拿到数据之前，需要对数据做一定处理。例如：</p><blockquote><ul><li>转换数据格式</li><li>移除loading</li></ul></blockquote><h2 id="为什么要封装axios" tabindex="-1"><a class="header-anchor" href="#为什么要封装axios" aria-hidden="true">#</a> 为什么要封装Axios</h2><p>在项目中会有很多的模块都需要发送网络请求，常见的比如登录模块，首页模块等，如果我们项目中直接使用诸如axios.get(), axios.post()，会存在很多弊端，<strong>哪些弊端呢？</strong></p><blockquote><ol><li>首先这样做会导致我们每个模块对axios依赖性太强，意味着我们项目中的每个模块都和一个第三方库耦合度较高，这样的话，如果axios不在维护，我们要更换库的时候将非常麻烦，我们可以假设一下，随着时间的推移，axios可能因为浏览器的升级，Webpack的改变而出现一些bug， 然而axios已不再维护，这时我们往往需要切换库，这就意味着我们需要去修改每个模块中的请求相关的代码，显而易见，非常繁琐。</li><li>还有一点，在我们发送网络请求的时候，往往会有很多共同的特性，比如说，在我们成功登录之后的其他请求中，我们往往需要在请求头中添加token，然后发送请求；在每次请求中，我们想展示一个loading… 这些功能如果在每次请求的逻辑中都写一遍，很明显，我们的代码重复度太高了。</li></ol></blockquote><p>而axios封装之后，则会带来很多好处：</p><blockquote><p>解决以上弊端，降低与第三方库的耦合度，这样我们将来需要更换库时，只需要修改我们封装后的request即可，这样我们往往只是修改封装后一两个文件，而不再需要每个模块每个模块的修改。</p></blockquote><p>在我们开发中，我认为class的相关语法封装性会更好，因此这里我选择尝试用类相关的概念来封装axios。我想要的封装后达到的效果：可以直接在其他项目使用。</p><h2 id="利用面向对象的思想对axios进行封装" tabindex="-1"><a class="header-anchor" href="#利用面向对象的思想对axios进行封装" aria-hidden="true">#</a> 利用面向对象的思想对Axios进行封装</h2><h3 id="基础封装" tabindex="-1"><a class="header-anchor" href="#基础封装" aria-hidden="true">#</a> 基础封装</h3><p>封装一个Request的类，使得在外部可以调用此类的构造函数创建实例，创建的实例就对应axios实例，<code>http/request.ts</code>中代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosInstance<span class="token punctuation">,</span> AxiosRequestConfig<span class="token punctuation">,</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建这个类的目的：每个创建出的HDRequest的实例都对应一个axios实例</span>
<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建实例的方法：constructor()构造实例</span>
  instance<span class="token operator">:</span> AxiosInstance<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 二次封装网络请求的方法</span>
  <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 暴露Request类</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Request<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本配置信息单独写在一个文件中，<code>config/index.ts</code>中代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">CONFIG</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 服务器地址</span>
    serverAddress<span class="token operator">:</span> <span class="token string">&#39;https://91huajian.cn&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 其他基础配置项，入最长响应时间等</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token constant">CONFIG</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>http/index.ts</code>中创建一个<code>Request</code>类的一个实例<code>http</code>，并配置这个实例：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Request <span class="token keyword">from</span> <span class="token string">&quot;./index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">CONFIG</span> <span class="token keyword">from</span> <span class="token string">&quot;@/config&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个axios实例</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  baseURL<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>serverAddress<span class="token punctuation">,</span>
  timeout<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>maxTimeout<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> http<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在接口中使用该实例发送请求：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 在http/api/sponsor.ts文件中封装发送请求的方法，在页面组件任意位置随意调用</span>
<span class="token keyword">import</span> http <span class="token keyword">from</span> <span class="token string">&#39;../request&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 查询赞助</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> getSponsorListAsync<span class="token operator">:</span> <span class="token function-variable function">any</span> <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        url<span class="token operator">:</span> <span class="token string">&#39;/huajian/common/getSponsorList&#39;</span><span class="token punctuation">,</span>
        method<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>
        params<span class="token operator">:</span> params
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拦截器的类型" tabindex="-1"><a class="header-anchor" href="#拦截器的类型" aria-hidden="true">#</a> 拦截器的类型</h3><p>拦截器分为三种：</p><blockquote><ul><li>类拦截器（在封装的axios类（文中类为<code>Request</code>类）上定义的拦截器）</li><li>实例拦截器（在利用<code>Request</code>类实例化对象时传递的参数中定义的拦截器）</li><li>接口拦截器（在调用实例时传入的参数中定义的参数）</li></ul></blockquote><h3 id="配置全局拦截器-类拦截" tabindex="-1"><a class="header-anchor" href="#配置全局拦截器-类拦截" aria-hidden="true">#</a> 配置全局拦截器（类拦截）</h3><p>保证每一个axios实例对象都有拦截器，即本<strong>使用Request实例化的对象</strong>发送的请求都会被配置的拦截器所拦截并执行拦截器中的程序。</p><p>类拦截器比较容易实现，只需要在类中对<code>axios.create()</code>创建的实例调用<code>interceptors</code>下的两个拦截器即可，实例代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosInstance<span class="token punctuation">,</span>AxiosRequestConfig<span class="token punctuation">,</span>AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RequestConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types/types&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
  instance<span class="token operator">:</span> AxiosInstance<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> RequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加全局请求拦截器，每个实例都有</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token comment">// 拦截到请求中携带的所有配置项config</span>
      <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局请求拦截器&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err
    <span class="token punctuation">)</span>
    <span class="token comment">// 添加全局响应拦截器，每个实例都有</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token comment">// 拦截到服务器返回的响应体res</span>
      <span class="token punctuation">(</span>res<span class="token operator">:</span> AxiosResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局响应拦截器&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Request<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里对响应拦截器做了一个简单的处理，就是将请求结果中的<code>.data</code>进行返回，因为我们对接口请求的数据主要是存在在<code>.data</code>中，跟<code>data</code>同级的属性我们基本是不需要的。</p><h3 id="为某一request实例单独配置拦截器-实例拦截" tabindex="-1"><a class="header-anchor" href="#为某一request实例单独配置拦截器-实例拦截" aria-hidden="true">#</a> 为某一Request实例单独配置拦截器（实例拦截）</h3><p>实例拦截器是为了保证封装的灵活性，因为每一个实例中的拦截后处理的操作可能是不一样的，所以在定义实例时，允许我们传入拦截器。</p><p>新创建一个实例<code>http2</code>在它的<code>config</code>中传入拦截器属性，但是<code>axios</code>的<code>AxiosRequestConfig</code>类型中并没有拦截器属性类型。</p><p>因此需要对<code>types/index.ts</code>中的构造函数中的<code>config</code>类型进行扩展（extends）。首先我们定义一下interface，方便类型提示，代码如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosRequestConfig<span class="token punctuation">,</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 拦截器的类型</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestInterceptors<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token comment">// 请求拦截器</span>
  requestInterceptor<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> AxiosRequestConfig<span class="token punctuation">;</span><span class="token comment">// 在发送请求之前做些什么</span>
  requestInterceptorCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token comment">// 对请求错误做些什么</span>
  <span class="token comment">// 响应拦截器</span>
  responseInterceptor<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span><span class="token comment">// 对响应数据做点什么</span>
  responseInterceptorsCatch<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token comment">// 对响应错误做点什么</span>
<span class="token punctuation">}</span>
<span class="token comment">// 自定义传入的参数</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">RequestConfig<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span>  AxiosResponse<span class="token operator">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AxiosRequestConfig</span><span class="token punctuation">{</span>
  interceptors<span class="token operator">?</span><span class="token operator">:</span> RequestInterceptors<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再创建新的实例，并在实例中引入定义的拦截器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> Request <span class="token keyword">from</span> <span class="token string">&quot;./index&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token constant">CONFIG</span> <span class="token keyword">from</span> <span class="token string">&quot;@/config&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>RequestConfig<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./types/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个axios实例</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  baseURL<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>serverAddress<span class="token punctuation">,</span>
  timeout<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>maxTimeout
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> http2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  baseURL<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>serverAddress<span class="token punctuation">,</span>
  timeout<span class="token operator">:</span> <span class="token constant">CONFIG</span><span class="token punctuation">.</span>maxTimeout<span class="token punctuation">,</span>
  interceptors<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置请求拦截器</span>
    <span class="token function-variable function">requestInterceptor</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token operator">:</span> RequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;通过请求拦截器,拿到http2的请求配置参数&#39;</span><span class="token punctuation">,</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 响应拦截器</span>
    <span class="token function-variable function">responseInterceptor</span><span class="token operator">:</span> <span class="token punctuation">(</span>result<span class="token operator">:</span> AxiosResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;通过响应拦截器,拿到http2的响应返回的结果&#39;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>http<span class="token punctuation">,</span>http2<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：这里的拦截器只能由使用<code>http2</code>实例发送的请求才会执行。</strong></p><p><strong>我们的拦截器的执行顺序为实例请求→类请求→实例响应→类响应；这样我们就可以在实例拦截上做出一些不同的拦截，</strong></p><p>此时在使用<code>Request</code>实例化对象<code>http2</code>时，我们传入的配置项中多了<code>interceptors</code>配置项，那么在<code>Request</code>类中我们就得接收并在实例化时执行：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios<span class="token punctuation">,</span> <span class="token punctuation">{</span> AxiosInstance<span class="token punctuation">,</span>AxiosRequestConfig<span class="token punctuation">,</span>AxiosResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RequestConfig<span class="token punctuation">,</span>RequestInterceptors <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./types/types&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>
  instance<span class="token operator">:</span> AxiosInstance<span class="token punctuation">;</span>
  <span class="token comment">// 拦截器对象</span>
  interceptorsObj<span class="token operator">?</span><span class="token operator">:</span> RequestInterceptors<span class="token operator">&lt;</span>AxiosResponse<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>config<span class="token operator">:</span> RequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsObj <span class="token operator">=</span> config<span class="token punctuation">.</span>interceptors<span class="token punctuation">;</span><span class="token comment">//接收实例对象传入的该实例的定制拦截器</span>
    
    <span class="token comment">// 全局请求拦截器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局请求成功拦截器&#39;</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> err
    <span class="token punctuation">)</span>  
    <span class="token comment">// 使用实例对象的自定义拦截器 针对特定的http2实例添加拦截器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsObj<span class="token operator">?.</span>requestInterceptor<span class="token punctuation">,</span> <span class="token comment">// 请求前的拦截器</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsObj<span class="token operator">?.</span>requestInterceptorCatch <span class="token comment">// 发送请求失败的拦截器</span>
    <span class="token punctuation">)</span>
    <span class="token comment">// 使用实例对象的自定义拦截器 针对特定的http2实例添加拦截器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      config<span class="token punctuation">.</span>interceptors<span class="token operator">?.</span>responseInterceptor<span class="token punctuation">,</span>
      config<span class="token punctuation">.</span>interceptors<span class="token operator">?.</span>responseInterceptorsCatch
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 全局响应拦截器</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span>res<span class="token operator">:</span> AxiosResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;全局响应成功拦截器&#39;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">request</span><span class="token punctuation">(</span>config<span class="token operator">:</span> AxiosRequestConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> Request<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="同一个request实例的不同网络请求设置不同的拦截器-接口拦截" tabindex="-1"><a class="header-anchor" href="#同一个request实例的不同网络请求设置不同的拦截器-接口拦截" aria-hidden="true">#</a> 同一个request实例的不同网络请求设置不同的拦截器（接口拦截）</h3><p>现在我们对<strong>单一接口</strong>进行拦截操作，首先我们将<code>AxiosRequestConfig</code>类型修改为<code>RequestConfig</code>允许传递拦截器；然后我们在类拦截器中将接口请求的数据进行了返回，也就是说在<code>request()</code>方法中得到的类型就不是<code>AxiosResponse</code>类型了。</p><p>接口中同一个实例在发送不同的<code>request</code>请求时一个配置了拦截器一个没配拦截器</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> http2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">;</span>

http2<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/entire/list&quot;</span><span class="token punctuation">,</span>
    params<span class="token operator">:</span> <span class="token punctuation">{</span>
      offset<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      size<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http2<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;/home/highscore&quot;</span><span class="token punctuation">,</span>
    interceptors<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">responseInterceptor</span><span class="token operator">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来自接口定制的请求前的拦截&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">responseInterceptor</span><span class="token operator">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;来自接口的响应成功的拦截&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对<code>request/index.ts</code>的<code>request</code>方法进行进一步封装，使之能够立即执行传进来的拦截器：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Request类的request方法：</span>
<span class="token comment">// 二次封装网络请求的方法</span>
<span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>config<span class="token operator">:</span> RequestConfig<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为同一个request实例的不同网络请求设置不同的拦截器</span>
    <span class="token comment">// 不能将拦截器放在实例上，这样的话同一个实例的拦截器都是一样的了</span>
    <span class="token comment">// 只能判断传进来的config中是否设置了拦截器，若设置了就直接执行</span>
      
    <span class="token comment">// 执行this.instance.request(config)之前先执行requestInterceptor，并更新config</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>interceptors<span class="token operator">?.</span>requestInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//立即调用拦截器函数执行</span>
      config <span class="token operator">=</span> config<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">requestInterceptor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 由于执行完this.instance.request(config)之后才能对response结果进行拦截，是个异步的过程</span>
    <span class="token comment">// 在Promise内部调用instance实例先执行this.instance.request(config)，然后等待结果，之后以结果作为拦截器函数的参数进行调用</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>instance
      <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果给单个响应设置拦截器,这里使用单个响应的拦截器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>interceptors<span class="token operator">?.</span>responseInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          res <span class="token operator">=</span> config<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">responseInterceptor</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="各种请求拦截的执行顺序" tabindex="-1"><a class="header-anchor" href="#各种请求拦截的执行顺序" aria-hidden="true">#</a> 各种请求拦截的执行顺序：</h3><blockquote><p><strong>拦截器执行顺序：接口请求 -&gt; 实例请求 -&gt; 全局请求 -&gt; 实例响应 -&gt; 全局响应 -&gt; 接口响应</strong></p></blockquote><p>实例请求和全局请求的先后顺序取决于在<code>Request</code>类<code>constructor()</code>构造函数中两种请求的执行顺序。</p><h2 id="取消请求" tabindex="-1"><a class="header-anchor" href="#取消请求" aria-hidden="true">#</a> 取消请求</h2><p>思路步骤：</p><ol><li>创建一个数组用于存储控制器资源；</li><li>在请求拦截器中将控制器存入数组；</li><li>在响应拦截器中将控制器从数组中移除；</li><li>封装一个取消全部请求的方法；</li><li>封住一个可以取消指定请求的方法；</li></ol><h3 id="准备" tabindex="-1"><a class="header-anchor" href="#准备" aria-hidden="true">#</a> 准备</h3><p>我们需要将所有请求的取消方法保存到一个集合（这里我用的数组，也可以使用Map）中，然后根据具体需要去调用这个集合中的某个取消请求方法。</p><p>因此，我们首先进行类型定义：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 一个取消请求对象，键位url，值为取消控制器</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CancelRequestSource</span> <span class="token punctuation">{</span> 
  <span class="token comment">// 取消请求的标识</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> AbortController<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们在Request类中定义储存取消请求对象的数组，和存放请求url的数组</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">/*
存放取消控制对象的集合
* 在创建请求后将取消控制对象 push 到该集合中
* 封装一个方法，可以取消请求，传入 url: string|string[]  
* 在请求之前判断同一URL是否存在，如果存在就取消请求
*/</span>
cancelRequestSourceList <span class="token operator">?</span><span class="token operator">:</span> CancelRequestSource<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">/*
存放所有请求URL的集合
* 请求之前需要将url push到该集合中
* 请求完毕后将url从集合中删除
* 添加在发送请求之前完成，删除在响应之后删除
*/</span>
requestUrlList <span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们要准备两个方法，一个时根据url在取消控制对象数组中找到对应请求的方法，另一个时完成取消请求后删除存放url数组和存放取下请求对象数组中对象请求的方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//根据url找到取消请求对象数组中此次请求取消对象存放的地址</span>
<span class="token keyword">private</span> <span class="token function">getSourceIndex</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> CancelRequestSource<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> url<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//请求取消完成后，我们要删除对应请求和取消请求对象</span>
<span class="token keyword">private</span> <span class="token function">delUrl</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> urlIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestUrlList<span class="token operator">?.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> u <span class="token operator">===</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> sourceIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSourceIndex</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 删除url和AbortController对象</span>
  urlIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requestUrlList<span class="token operator">?.</span><span class="token function">splice</span><span class="token punctuation">(</span>urlIndex <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  sourceIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token function">splice</span><span class="token punctuation">(</span>sourceIndex <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在发送请求前存入abortcontroller对象" tabindex="-1"><a class="header-anchor" href="#在发送请求前存入abortcontroller对象" aria-hidden="true">#</a> 在发送请求前存入<code>AbortController</code>对象</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> config<span class="token punctuation">.</span>url<span class="token punctuation">;</span>
<span class="token comment">// url存在 保存当前请求url 和 取消请求方法</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>requestUrlList<span class="token operator">?.</span><span class="token function">push</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将url存入url数组</span>
  <span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造实例化一个AbortController对象控制器</span>
  config<span class="token punctuation">.</span>signal <span class="token operator">=</span> controller<span class="token punctuation">.</span>signal<span class="token comment">//绑定请求</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token operator">:</span> controller<span class="token comment">//将该控制器添加入cancelRequestSourceList数组</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="请求已经完成了删除保存的url和abortcontroller对象" tabindex="-1"><a class="header-anchor" href="#请求已经完成了删除保存的url和abortcontroller对象" aria-hidden="true">#</a> 请求已经完成了删除保存的url和AbortController对象</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>instance
    <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">request</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果我们为单个响应设置拦截器，这里使用单个响应的拦截器</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>interceptors<span class="token operator">?.</span>responseInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res <span class="token operator">=</span> config<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">responseInterceptor</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      url <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">delUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 请求执行完毕,删除保存在数组中的url和该请求的取消方法</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="封装取消请求方法" tabindex="-1"><a class="header-anchor" href="#封装取消请求方法" aria-hidden="true">#</a> 封装取消请求方法</h3><ul><li>封装取消全部请求</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 取消全部请求</span>
<span class="token function">cancelAllRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> key <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>封装取消部分请求</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 取消请求</span>
<span class="token function">cancelRequest</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> url <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//  取消单个请求</span>
    <span class="token keyword">const</span> sourceIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSourceIndex</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sourceIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token punctuation">[</span>sourceIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存在多个需要取消请求的地址</span>
    url<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> sourceIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSourceIndex</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
      sourceIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cancelRequestSourceList<span class="token operator">?.</span><span class="token punctuation">[</span>sourceIndex<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67);function g(f,h){const a=i("ExternalLinkIcon");return p(),e("div",null,[u,r,n("p",null,[s("因axios基础使用十分简单，可参考"),n("a",k,[s("axios官方文档"),o(a)]),s("，这里不在介绍他基本用法，主要讲解拦截器。 拦截器主要分为两种，"),d,s("和"),v,s("。 "),m,s("：请求发送之前进行拦截，应用于我们在请求发送前需要对请求数据做一些处理。例如：")]),b])}const x=t(l,[["render",g],["__file","TypeScript封装axios.html.vue"]]);export{x as default};
