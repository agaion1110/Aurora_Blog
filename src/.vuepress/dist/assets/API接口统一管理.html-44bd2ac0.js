import{_ as s,W as a,X as t,$ as p,Y as n,Z as e,a1 as o}from"./framework-fb0d306d.js";const c="/assets/image-20230801153356788-29122b9d.png",i="/assets/image-20230801153418043-1a98a2f9.png",l="/assets/image-20230801150504146-45131c91.png",u={},r=n("h1",{id:"api接口统一管理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#api接口统一管理","aria-hidden":"true"},"#"),e(" API接口统一管理")],-1),k=n("p",null,"在开发项目的时候,接口可能很多需要统一管理。在src目录下去创建api文件夹去统一管理项目的接口；这样便于后期维护和团队开发。",-1),d=o(`<h2 id="axios二次封装" tabindex="-1"><a class="header-anchor" href="#axios二次封装" aria-hidden="true">#</a> axios二次封装</h2><p>对于axios不熟悉的话，建议先学习这篇文章:<a href="http://118.24.93.28/文章/分类/AJAX/Axios的基本使用.html">Axios的基本使用</a></p><p>在开发项目的时候避免不了与后端进行交互,因此我们需要使用axios插件实现发送网络请求。在开发项目的时候</p><p>我们经常会把axios进行二次封装。</p><p>目的:</p><blockquote><ol><li>使用请求拦截器，可以在请求拦截器中处理一些业务(开始进度条、请求头携带公共参数)</li><li>使用响应拦截器，可以在响应拦截器中处理一些业务(进度条结束、简化服务器返回的数据、处理http网络错误)</li></ol></blockquote><p>在根目录下创建utils/request.ts</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ElMessage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;element-plus&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//创建axios实例</span>
<span class="token keyword">let</span> request <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    baseURL<span class="token operator">:</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VITE_APP_BASE_API</span><span class="token punctuation">,</span>
    timeout<span class="token operator">:</span> <span class="token number">5000</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//请求拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> config<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//响应拦截器</span>
request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//处理网络错误</span>
    <span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> status <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>
            msg <span class="token operator">=</span> <span class="token string">&quot;token过期&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>
            msg <span class="token operator">=</span> <span class="token string">&#39;无权访问&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>
            msg <span class="token operator">=</span> <span class="token string">&quot;请求地址错误&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>
            msg <span class="token operator">=</span> <span class="token string">&quot;服务器出现问题&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            msg <span class="token operator">=</span> <span class="token string">&quot;无网络&quot;</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token function">ElMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token operator">:</span> <span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> msg
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> request<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="封装后的使用方法" tabindex="-1"><a class="header-anchor" href="#封装后的使用方法" aria-hidden="true">#</a> 封装后的使用方法</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;@/utils/request&#39;</span><span class="token comment">//引入封装的axios方法</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 当组件挂载完毕测试发一个请求，通过传递相关配置（config）来创建请求</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&#39;user/login&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;111111&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发送的网路请求：</p><p><img src="`+c+'" alt="image-20230801153356788" loading="lazy"><img src="'+i+'" alt="image-20230801153418043"></p><h2 id="统一接口管理" tabindex="-1"><a class="header-anchor" href="#统一接口管理" aria-hidden="true">#</a> 统一接口管理</h2><p>这里我们需要在scr目录下创建API文件夹用于管理接口，在API文件中创建不同分类的文件夹如有关用户个人信息的文件夹中可以包含用户的登录，注册，个人信息管理等接口请求。</p><p>下面我们以用户相关接口为例对它们进行统一接口管理。</p><figure><img src="'+l+`" alt="image-20230801150504146" tabindex="0" loading="lazy"><figcaption>image-20230801150504146</figcaption></figure><p><code>type.ts</code>：对请求的参数和返回的结构进行类型的定义</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 登录接口需要携带的参数ts类型</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">loginForm</span> <span class="token punctuation">{</span>
    username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">dataType</span><span class="token punctuation">{</span>
    token<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">loginResponseData</span> <span class="token punctuation">{</span> 
    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> dataType
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">userInfo</span><span class="token punctuation">{</span>
    userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    avatar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    username<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    password<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    desc<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
    roles<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    buttons<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    routes<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    token<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
<span class="token comment">// 定义服务器返回会的用户信息相关的数据类型</span>
<span class="token keyword">interface</span> <span class="token class-name">user</span> <span class="token punctuation">{</span>
    checkUser<span class="token operator">:</span> userInfo
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">userResponseData</span> <span class="token punctuation">{</span>
    code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    data<span class="token operator">:</span> user
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>index.ts</code>：对与个人信息有关的接口进行统一的管理暴露。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 统一管理用户相关的接口</span>
<span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;@/utils/request&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> loginForm<span class="token punctuation">,</span>loginResponseData<span class="token punctuation">,</span>userResponseData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./type&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 统一管理接口</span>
<span class="token keyword">enum</span> <span class="token constant">API</span><span class="token punctuation">{</span>
    <span class="token constant">LOGIN_URL</span> <span class="token operator">=</span> <span class="token string">&#39;/user/login&#39;</span><span class="token punctuation">,</span>
    <span class="token constant">USERINFO_URL</span> <span class="token operator">=</span> <span class="token string">&#39;/user/info&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// 对外暴露请求函数</span>
<span class="token comment">// 登录接口</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqLogin</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> loginForm<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> request<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span>loginResponseData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">LOGIN_URL</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token comment">// 获取用户信息接口</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reqUserInfo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> request<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span>userResponseData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token constant">API</span><span class="token punctuation">.</span><span class="token constant">USERINFO_URL</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在任意组件中使用该接口" tabindex="-1"><a class="header-anchor" href="#在任意组件中使用该接口" aria-hidden="true">#</a> 在任意组件中使用该接口</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span>reqLogin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/api/user/index&#39;</span><span class="token comment">//引用暴露的reqLogin函数，</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 当组件挂载完毕测试发一个请求,reqLog是统一封装管理的api暴露的接口，我们这里自需要按照接口定义的指定类型参数即可发起请求并返回响应值</span>
<span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// reqLogin(data:loginForm)函数只需要传入一个loginForm类型对象的参数即可发起请求</span>
  <span class="token function">reqLogin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">username</span><span class="token operator">:</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22);function v(m,b){return a(),t("div",null,[r,k,p(" more "),d])}const y=s(u,[["render",v],["__file","API接口统一管理.html.vue"]]);export{y as default};
